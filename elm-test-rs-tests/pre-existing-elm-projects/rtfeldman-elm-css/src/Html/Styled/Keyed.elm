module Html.Styled.Keyed exposing
    ( node
    , ol, ul
    , lazyNode, lazyNode2, lazyNode3, lazyNode4, lazyNode5, lazyNode6
    )

{-| A keyed node helps optimize cases where children are getting added, moved,
removed, etc. Common examples include:

  - The user can delete items from a list.
  - The user can create new items in a list.
  - You can sort a list based on name or date or whatever.

When you use a keyed node, every child is paired with a string identifier. This
makes it possible for the underlying diffing algorithm to reuse nodes more
efficiently.


# Keyed Nodes

@docs node


# Commonly Keyed Nodes

@docs ol, ul


# Keyed Nodes with Lazy Children

@docs lazyNode, lazyNode2, lazyNode3, lazyNode4, lazyNode5, lazyNode6

-}

import Html.Styled exposing (Attribute, Html)
import VirtualDom.Styled


{-| Works just like `Html.node`, but you add a unique identifier to each child
node. You want this when you have a list of nodes that is changing: adding
nodes, removing nodes, etc. In these cases, the unique identifiers help make
the DOM modifications more efficient.
-}
node : String -> List (Attribute msg) -> List ( String, Html msg ) -> Html msg
node =
    VirtualDom.Styled.keyedNode


{-| -}
ol : List (Attribute msg) -> List ( String, Html msg ) -> Html msg
ol =
    node "ol"


{-| -}
ul : List (Attribute msg) -> List ( String, Html msg ) -> Html msg
ul =
    node "ul"


{-| Creates a node that has children that are both keyed **and** lazy.

The unique key for each child serves double duty:

  - The key helps the Elm runtime make DOM modifications more efficient
  - The key becomes the id of child and the css generated by lazy becomes scoped to that id allowing the browser to save time calculating styles

Some notes about using this function:

  - The key must be a valid HTML id
  - The key should be unique among other ids on the page and unique among the keys for other siblings
  - No other id attributes should be specified on the keyed child nodes - they will be ignored

-}
lazyNode : String -> List (Attribute msg) -> (a -> Html msg) -> List ( String, a ) -> Html msg
lazyNode nodeType properties =
    VirtualDom.Styled.keyedLazyNode (VirtualDom.Styled.keyedNode nodeType properties)


{-| Same as `lazyNode`, but checks on 2 arguments.
-}
lazyNode2 : String -> List (Attribute msg) -> (a -> b -> Html msg) -> List ( String, ( a, b ) ) -> Html msg
lazyNode2 nodeType properties =
    VirtualDom.Styled.keyedLazyNode2 (VirtualDom.Styled.keyedNode nodeType properties)


{-| Same as `lazyNode`, but checks on 3 arguments.
-}
lazyNode3 : String -> List (Attribute msg) -> (a -> b -> c -> Html msg) -> List ( String, ( a, b, c ) ) -> Html msg
lazyNode3 nodeType properties =
    VirtualDom.Styled.keyedLazyNode3 (VirtualDom.Styled.keyedNode nodeType properties)


{-| Same as `lazyNode`, but checks on 4 arguments.
-}
lazyNode4 : String -> List (Attribute msg) -> (a -> b -> c -> d -> Html msg) -> List ( String, { arg1 : a, arg2 : b, arg3 : c, arg4 : d } ) -> Html msg
lazyNode4 nodeType properties =
    VirtualDom.Styled.keyedLazyNode4 (VirtualDom.Styled.keyedNode nodeType properties)


{-| Same as `lazyNode`, but checks on 5 arguments.
-}
lazyNode5 : String -> List (Attribute msg) -> (a -> b -> c -> d -> e -> Html msg) -> List ( String, { arg1 : a, arg2 : b, arg3 : c, arg4 : d, arg5 : e } ) -> Html msg
lazyNode5 nodeType properties =
    VirtualDom.Styled.keyedLazyNode5 (VirtualDom.Styled.keyedNode nodeType properties)


{-| Same as `lazyNode`, but checks on 6 arguments.
-}
lazyNode6 : String -> List (Attribute msg) -> (a -> b -> c -> d -> e -> f -> Html msg) -> List ( String, { arg1 : a, arg2 : b, arg3 : c, arg4 : d, arg5 : e, arg6 : f } ) -> Html msg
lazyNode6 nodeType properties =
    VirtualDom.Styled.keyedLazyNode6 (VirtualDom.Styled.keyedNode nodeType properties)
