name: Haskell CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.4.8'
        cabal-version: '3.10'

    - name: Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-cabal
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        cp cabal.project.freeze.ghc94 cabal.project.freeze
        cabal update
        cabal build --only-dependencies --enable-tests --enable-benchmarks
    - name: Build
      run: cabal build --enable-tests --enable-benchmarks all
    - name: Run cabal tests
      run: cabal test all
    - name: Run elm-test-rs tests
      run: python run-test-rs-tests.py
    - name: Cache custom package server
      uses: actions/cache@v3
      env:
        cache-name: cache-cabal-custom-package-server
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Build custom package server
      # We have to do this weird thing where we remove the cabal.project file
      # because cabal.project files really don't like different projects being
      # at different levels of the hierarchy.
      run: |
        rm cabal.project
        cd custom-package-server
        cabal build
        python example_test.py
